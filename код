import re
import urllib.request
import os
import html
def download_page(pageUrl):
    try:
        page = urllib.request.urlopen(pageUrl)
        text = page.read().decode('UTF-8')
    except:
        text = 'unavailable page'
    return text


def txt_(text):
    regPostTitletxt = re.compile('<div class="b-block-text__text">(.*?)</div>', flags=re.DOTALL)
    t = regPostTitletxt.findall(text)
    if t:
        txt_ = t
        new_text = []
        regTag = re.compile('<.*?>', flags=re.DOTALL)
        regSpace = re.compile('\s{2,}', flags=re.DOTALL)
        for finaltext in txt_:
            clean_t = regSpace.sub("", finaltext)
            clean_t = regTag.sub("", clean_t)
            new_text.append(clean_t)
            for finaltext in new_text:
                finaltext.replace("&nbsp;&rarr;&raquo;&mdash;&laquo&ndash;", " ")
        if finaltext:
            txt_ = html.unescape(finaltext)
    else:
        txt_ = 'no text'
    return txt_

def author_(text):
    regPostTitleauthor = re.compile('<span class="b-object__detail__author__name">(.*?)</span>', flags=re.DOTALL)
    a = regPostTitleauthor.search(text)
    if a:
        author_ = a.group(1)
    else:
        author_ = 'Noname'

    return author_

def published(text):
    regPostTitledate = re.compile('<span class="date">.*?<span class="date">((\d{2})\.(\d{2})\.(\d{4}))</span>', flags=re.DOTALL)
    d = regPostTitledate.search(text)
    return d

def date_(d):
    if d:
        date_ = d.group(1)
    else:
        date_ = 'no date'
    return date_

def year_(d):
    if d:
        year_ = d.group(4)
    return year_
    
def month_(d):
    if d:
        month_ = d.group(3)
    return month_

def link_(text):
    regPostTitlelink = re.compile('<link rel="canonical" href="(.*?)"/>', flags=re.U | re.DOTALL)
    l = regPostTitlelink.search(text)
    if l:
        link_ = l.group(1)
    return link_

def header_(text):
    regPostTitleheader = re.compile('<meta name="title" content="(.*?)"/>', flags=re.DOTALL)
    h = regPostTitleheader.search(text)
    if h:
        header_ = h.group(1)
    return header_

def dirs(year, month, i, header, date, author, link, txt):
    if not os.path.exists(r'C:\\Users\\Lera\\Desktop\\прога\\plain\\' + year + os.sep + month):
        os.makedirs(r'C:\\Users\\Lera\\Desktop\\прога\\plain\\' + year + os.sep + month)
    file = open(r'C:\\Users\\Lera\\Desktop\\прога\\plain\\' + year + os.sep + month + os.sep +  str(i) + '.txt', 'w', encoding = 'UTF - 8')
    file.write('@au ' + author + '@ti ' + header + '\n' + '@da ' + date + '\n' + '@topic Notopic\n' + '@url ' + link + '\n' + txt)
    file.close()

def meta_data(path, author, header, date, link, year):
    row = '%s\t%s\t\t\t%s\t%s\t\tпублицистика\t\t\tнет категории\t\tнейтральный\tн-возраст\tн-уровень\tрайонная\t%s\t\tВелижская новь\t%s\t\tгазета\tРоссия\tСмоленская область\tru'
    string = row % (path, author, header, date, link, year)
    file = open(r'C:\\Users\\Lera\\Desktop\\прога\\metadata.csv', 'a', encoding = 'UTF-8')
    file.write(string + '\n')
    file.close()

def main():
    commonUrl = 'http://velizhnov.ru/article/'
    for i in range(90000, 114764):
        pageUrl = commonUrl + str(i)
        text = download_page(pageUrl)
        if text != 'unavailable page':
            txt = txt_(text)
        else:
            continue
        if txt != '':
            header = header_(text)
            d_ = published(text)
            date = date_(d_)
            author = author_(text)
            link = link_(text)
        else:
            continue
        if date != 'no date':
            month = month_(d_)
            year = year_(d_)
            dirs(year, month, i, header, date, author, link, txt)
            path = 'C:\\Users\\Lera\\Desktop\\прога\\plain\\' + year + '\\' + month + '\\' +  str(i) + '.txt'
            meta_data(path, author, header, date, link, year)
        else:
            continue
if __name__ == '__main__':
    main()
